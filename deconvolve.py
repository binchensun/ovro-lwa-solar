from casatasks import clearcal, ft, bandpass, applycal, flagdata, tclean, flagmanager, uvsub, gaincal, split, imstat, \
    gencal
from casatools import table, measures, componentlist, msmetadata
import math
import sys, os, time
import numpy as np
from astropy.time import Time
from astropy.coordinates import SkyCoord
import astropy.units as u
from astropy.wcs import WCS
from astropy.io import fits
import matplotlib.pyplot as plt
import utils,flagging,calibration,selfcal,source_subtraction
import logging, glob
from file_handler import File_Handler
from primary_beam import analytic_beam as beam 
import primary_beam
from generate_calibrator_model import model_generation
import generate_calibrator_model
tb = table()
me = measures()
cl = componentlist()
msmd = msmetadata()


def run_wsclean(msfile, imagename, automask_thresh=8, imsize=4096, cell='2arcmin', uvrange='10',
                predict=True,pol='I',fast_vis=False, intervals_out=None, field=None):  ### uvrange is in lambda units
    logging.debug("Running WSCLEAN")
    if fast_vis==True:
        if field is None:
           intervals_out=1
           field='all'
        else: 
            intervals_out=len(field.split(','))
    else:
        intervals_out=1
        field='all'
    os.system("wsclean -no-dirty -no-update-model-required -no-negative -size " + str(imsize) + " " + \
              str(imsize) + " -scale " + cell + " -weight uniform -minuv-l " + str(uvrange) + " -auto-mask " + str(
        automask_thresh) + \
              " -niter 100000 -name " + imagename + " -mgain 0.75 -beam-fitting-size 2 -pol "+pol+' ' + "-intervals-out "+\
                str(intervals_out)+" -field "+field + " "+msfile)
    
    
    if intervals_out!=1:
        image_names=utils.get_fast_vis_imagenames(msfile,imagename,pol)
        for name in image_names:
            wsclean_imagename=name[0]
            final_imagename=name[1]
            os.system("mv "+wsclean_imagename+" "+final_imagename)
                
    if predict:
        logging.debug("Predicting model visibilities from " + imagename + " in " + msfile)
        os.system("wsclean -predict -pol "+pol+" "+ "-name " + imagename + " " + msfile)
        
        

def predict_model(msfile, outms, image="_no_sun",pol='I'):
    """
    Predict a model measurement set from an image. In the pipeline, it is
    used for transforming a model all sky image without the Sun to the output ms, and write it into the model column
    :param msfile: input CASA measurement set
    :param outms: output CASA measurement set
    :param image: input all sky image with non-solar sources, generated by gen_nonsolar_source_model()
    :return: N/A, but with an output CASA measurement set written into the same area as in the input ms
    """
    os.system("cp -r " + msfile + " " + outms)
    clearcal(outms, addmodel=True)
    os.system("wsclean -predict -pol "+pol+" -name " + image + " " + outms)





def make_solar_image(msfile, imagename='sun_only',
                     imsize=512, cell='1arcmin', niter=500, uvrange='', psfcutoff=0.5):
    """
    Simple wrapper of CASA's tclean to make a solar image center at the solar disk center
    :param msfile: input CASA measurement set
    :param imagename: output image name
    :param imsize: size of the image in pixels
    :param cell: pixel scale
    :param niter: number of iterations
    :param uvrange: uvrange following tclean's syntax
    :param psfcutoff: cutoff level to fit the PSF
    :return: resulting CASA image
    """
    sunpos = utils.get_sun_pos(msfile)
    tclean(msfile, imagename=imagename, uvrange=uvrange, imsize=imsize, cell=cell,
           weighting='uniform', phasecenter=sunpos, niter=niter, psfcutoff=psfcutoff)
           
                  
