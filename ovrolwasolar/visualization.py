import matplotlib.pyplot as plt
import numpy as np
import matplotlib.colors as mcolors
from casatools import table, msmetadata
# the functions to plot the data

njit_logo_str="iVBORw0KGgoAAAANSUhEUgAAAHgAAAA3CAMAAADwtH5ZAAAAVFBMVEVHcEzuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCTuNCQLSl2nAAAAG3RSTlMA2xyijg4I9TgExewsRlFwFPqvz7x7IuVcZJtcMgeUAAADGklEQVRYw+XY2ZKzKhAAYJRFFgUFFJT3f8/TGJPRaP6aVGXIxemam8HlSwNiI0L/z5i7w78t5/DH2b6NQUObW3t02Xw4GfVGQ/M+eMfPrrBhL4uOBKV8PNyLRmgMSpr6CEesQlA20kNz16RG5Qhw8BYDFhdwqg6/h9nU6OezmE8pzaeLpyql5jkbMzhvMV7skJJbMMY+pOUqYzh8uHZMoT2dhlMaulMrlSmF6alxIb2AyJknkgU2YXINJ7eXzAu4uYar+umG4/To8rSBfDzDaycm2R7g6RLmv4IRRSeY1pdwc5Tn873egtEZvgomBxJA9m1p2CetVc55Kg+jOfe23+RYBoZr4ak1O1kPVV8A7l1eGMT4I+vBlYMR+5HLwncZ7tIVg8224mTZ1nBBKXhEe7nnjaQF4Lq6w5uMdePpGy+JD8Cb7IZSMEFHOZWHkbitJO/AF68ytC1EMG7iJQxFxL48WGXPfgnDzEzqFRzTP2Gu0mESZ9mKX87qKVw239/rlylsr4gu35FwcZCv4VNdIjhZH8B4OsAYpXUubYKe6mma6r7vKWVM7OpHM8fZ6P0PE7O5LJDk87LCtIkQs1nHQNC65TqakWBrvZTVkOdpU93DSentQoxuX3e/uJxFL2com3gciZVVaFbsEMPQqFA5Jy1eCBkhTy7eqPphMMPFWLIaSCyrAwgUSNIDNJqoO95CV1OWC8/3Ax6N50KxbyOxlfohB1U5j4mJmcrSB7Y5UOTj3dQXPTfYPUwQJSZzx6fPaPv9VYMfM2tFm81UlV9gq1TTD4NbvrMbb/mKKRKp7qYlkdfs77aTbFzWecVaY7dnJHgw+z80tzShHykfvbo9mHbspr82HxvhmzpktBZlUCRas6rKEz2VQmEOaxxyqnhuabmvFIwTN6TGEV2XSxWSjVZltetLfpIR7ejSUFqF1/QSUrXosiqi2jbKxqnwd69+lo0bOSvM1sYFW7qLV9aR4skCK6UpPbL5E6T/Qh9DuWlxV7yPoVDFXxha2E0QwkV5tjak+wLL9PiFsUWoNZp+gUU81ugrQcU31P8AFQ9Mc+zu8kIAAAAASUVORK5CYII="
nsf_logo = "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"

def inspection_bl_flag(ms_file):
    """
    Function to inspect the baseline flagging of the data
    
    :param ms_file: str : path to the measurement set file
    """
    tb = table()
    msmd = msmetadata()
    tb.open(ms_file)

    # Extract DATA Column
    visibility_data = tb.getcol('DATA')

    # Extract UVW Column
    uvw_data = tb.getcol('UVW')

    # extract ant1 and2 columns
    ant1 = tb.getcol('ANTENNA1')
    ant2 = tb.getcol('ANTENNA2')

    # extract location of antennas
    antenna_positions = msmd.antennaposition()
    antenna_names = msmd.antennanames()

    u_col = uvw_data[0, :]
    v_col = uvw_data[1, :]
    w_col = uvw_data[2, :]

    stokes_I = 0.5 * (visibility_data[0,:,:] + visibility_data[3,:,:])

    # Extract FLAG Column
    flag_data = tb.getcol('FLAG')


    # Close the table
    tb.close()

    img_cross = np.zeros((352, 352))

    for idx in range(stokes_I.shape[1]):
        # img_cross[ant1[idx], ant2[idx]] = np.mean(np.abs(stokes_I[:,idx]), axis=0)
        # insert flag_data
        img_cross[ant1[idx], ant2[idx]] = np.mean(np.abs(flag_data[0,:,idx]), axis=0)
        img_cross[ant2[idx], ant1[idx]] = np.mean(np.abs(flag_data[0,:,idx]), axis=0)

    fig_plt  = plt.imshow((img_cross), cmap='viridis', origin='lower', norm=mcolors.PowerNorm(0.5))
    return fig_plt